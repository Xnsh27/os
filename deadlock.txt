#include <stdio.h>
#include <stdbool.h>

#define MAX_RESOURCES 10
#define MAX_PROCESSES 10

int allocation[MAX_PROCESSES][MAX_RESOURCES]; // Allocation matrix
int max[MAX_PROCESSES][MAX_RESOURCES];        // Max demand matrix
int need[MAX_PROCESSES][MAX_RESOURCES];       // Need matrix
int available[MAX_RESOURCES];                  // Available resources
int numProcesses, numResources;

void calculateNeed() {
    for (int i = 0; i < numProcesses; i++) {
        for (int j = 0; j < numResources; j++) {
            need[i][j] = max[i][j] - allocation[i][j];
        }
    }
}

bool isSafe() {
    bool finish[MAX_PROCESSES] = {false};
    int safeSeq[MAX_PROCESSES];
    int work[MAX_RESOURCES];
    
    for (int i = 0; i < numResources; i++)
        work[i] = available[i];

    int count = 0;
    while (count < numProcesses) {
        bool found = false;
        for (int p = 0; p < numProcesses; p++) {
            if (!finish[p]) {
                int j;
                for (j = 0; j < numResources; j++)
                    if (need[p][j] > work[j])
                        break;

                if (j == numResources) { // If all resources can be allocated
                    for (int k = 0; k < numResources; k++)
                        work[k] += allocation[p][k];

                    safeSeq[count++] = p;
                    finish[p] = true;
                    found = true;
                }
            }
        }
        if (!found) {
            printf("System is not in a safe state.\n");
            return false;
        }
    }

    printf("System is in a safe state.\n");
    printf("Safe sequence is: ");
    for (int i = 0; i < numProcesses; i++)
        printf("%d ", safeSeq[i]);
    printf("\n");
    return true;
}

void requestResources(int processID, int request[]) {
    // Check if request is less than need
    for (int j = 0; j < numResources; j++) {
        if (request[j] > need[processID][j]) {
            printf("Error: Process has exceeded its maximum claim.\n");
            return;
        }
    }

    // Check if request is less than available
    for (int j = 0; j < numResources; j++) {
        if (request[j] > available[j]) {
            printf("Process is requesting resources that are not available.\n");
            return;
        }
    }

    // Pretend to allocate resources
    for (int j = 0; j < numResources; j++) {
        available[j] -= request[j];
        allocation[processID][j] += request[j];
        need[processID][j] -= request[j];
    }

    // Check if the system is still in a safe state
    if (isSafe()) {
        printf("Resources allocated successfully to process %d.\n", processID);
    } else {
        // Rollback changes
        for (int j = 0; j < numResources; j++) {
            available[j] += request[j];
            allocation[processID][j] -= request[j];
            need[processID][j] += request[j];
        }
        printf("Resources request leads to an unsafe state, rolling back.\n");
    }
}

int main() {
    // Number of processes and resources
    numProcesses = 5;
    numResources = 3;

    // Example allocation matrix
    int exampleAllocation[5][3] = {
        {0, 1, 0},
        {2, 0, 0},
        {3, 0, 2},
        {2, 1, 1},
        {0, 0, 2}
    };

    // Example max matrix
    int exampleMax[5][3] = {
        {0, 1, 0},
        {2, 1, 1},
        {3, 0, 2},
        {2, 1, 2},
        {0, 0, 2}
    };

    // Initialize allocation and max matrices
    for (int i = 0; i < numProcesses; i++) {
        for (int j = 0; j < numResources; j++) {
            allocation[i][j] = exampleAllocation[i][j];
            max[i][j] = exampleMax[i][j];
        }
    }

    // Example available resources
    available[0] = 3;
    available[1] = 3;
    available[2] = 2;

    // Calculate the need matrix
    calculateNeed();

    // Check if the system is in a safe state
    isSafe();

    // Request resources for a process (e.g., Process 1)
    int request[3] = {1, 0, 2}; // Requesting 1 of resource 0, 0 of resource 1, 2 of resource 2
    requestResources(1, request);

    return 0;
}
